// Defining a single pipeline to process tree plantation data
pipeline plantationPipeline {

    // Step 1: Extract data from the provided URL
    dataFetcher -> textDataInterpreter;

    // Step 2: Interpret and process data in a pipeline
    textDataInterpreter
        -> csvParser 
        -> unnecessaryColumnRemover
        -> structuredTableInterpreter
        -> dataStorer;

    // Block to fetch data from the URL with retry option
    block dataFetcher oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
        retries: 3; // Retries 3 times in case of connection failure
    }

    // Block to interpret raw data as text
    block textDataInterpreter oftype TextFileInterpreter { }

    // Block to remove any extra column, specifically "baumart_deutsch"
    block unnecessaryColumnRemover oftype ColumnDeleter {
        delete: [column E]; // Dropping the 'baumart_deutsch' column
    }

    // Regular expression constraint for stadtteil field to match "Vogelsang" area only
    constraint VogelsangRegex oftype RegexConstraint {
        regex: /^Vogelsang/;
    }

    // Regular expression constraint for id field to match geo-coordinate pattern
    constraint GeoPattern oftype RegexConstraint {
        regex: /\d{1,3}\.\d+,\s?\d{1,3}\.\d+/;
    }

    // Custom value type for matching "Vogelsang" pattern
    valuetype VogelsangOnly oftype text {
        constraints: [VogelsangRegex];
    }

    // Custom value type for matching geo-coordinate format
    valuetype GeoCoordOnly oftype text {
        constraints: [GeoPattern];
    }

    // Block to parse CSV data with a specified delimiter
    block csvParser oftype CSVInterpreter {
        delimiter: ";";
        enclosing: ''; // No enclosing character
    }

    // Block to define table structure, with custom value types for specific columns
    block structuredTableInterpreter oftype TableInterpreter {
        header: true; // Specifies the presence of header row in CSV
        columns: [
            "lfd_nr" oftype integer,
            "stadtteil" oftype VogelsangOnly, // Validates "stadtteil" with Vogelsang pattern
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype GeoCoordOnly, // Ensures id follows geo-coordinate format
            "baumfamilie" oftype text
        ];
    }

    // Block to load the processed data into an SQLite database
    block dataStorer oftype SQLiteLoader {
        table: "trees"; // Table name in SQLite database
        file: "./trees.sqlite"; // SQLite database file name
    }
}