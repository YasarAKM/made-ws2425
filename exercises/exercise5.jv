pipeline GTFSProcessingPipeline {

  // From the specified URL Download GTFS
  GTFSDownloader
    -> GTFSZipHandler
    -> StopsFileSelector
    -> StopsFileReader
    -> StopsCSVParser
    -> StopsTableProcessor
    -> SQLiteDataWriter;

  // Step to fetch the GTFS zip file from the provided URL
  block GTFSDownloader oftype HttpExtractor {
      url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
  }

  // Step to handle the extracted zip archive
  block GTFSZipHandler oftype ArchiveInterpreter {
      archiveType: "zip";
  }

  // Step to locate and select the stops.txt file within the archive
  block StopsFileSelector oftype FilePicker {
      path: "./stops.txt";
  }

  // Step to read and decode the stops.txt file
  block StopsFileReader oftype TextFileInterpreter {
      encoding: "utf8";
  }

  // Step to parse the stops.txt file as a CSV
  block StopsCSVParser oftype CSVInterpreter {
      delimiter: ",";
      enclosing: '"';
  }

  // Define validation rules for geographic data
  constraint GeoRangeValidator oftype RangeConstraint {
      lowerBound: -90;
      upperBound: 90;
      lowerBoundInclusive: true;
      upperBoundInclusive: true;
  }

  // Define a custom value type for geographic coordinates
  valuetype GeoCoordinates oftype decimal {
      constraints: [GeoRangeValidator];
  }

  // Validation rule for zone_id values
  constraint ZoneIDValidator oftype RangeConstraint {
      lowerBound: 1925;
      upperBound: 1925;
      lowerBoundInclusive: true;
      upperBoundInclusive: true;
  }

  // Define a custom value type for zone_id
  valuetype ZoneID oftype integer {
      constraints: [ZoneIDValidator];
  }

  // Step to define table structure and process stops data
  block StopsTableProcessor oftype TableInterpreter {
      header: true;
      columns: [
          "stop_id" oftype integer,
          "stop_name" oftype text,
          "stop_lat" oftype GeoCoordinates,
          "stop_lon" oftype GeoCoordinates,
          "zone_id" oftype ZoneID
      ];
  }

  // Step to save processed data into a SQLite database
  block SQLiteDataWriter oftype SQLiteLoader {
      table: "stops";
      file: "gtfs.sqlite";
  }
}
